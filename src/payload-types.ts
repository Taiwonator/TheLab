/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'flat-media': FlatMedia;
    'mock-pages': MockPage;
    'mock-page-users': MockPageUser;
    request: Request;
    'quest-impact-maps': QuestImpactMap;
    'quest-products': QuestProduct;
    quests: Quest;
    'quest-state-logs': QuestStateLog;
    'quest-users': QuestUser;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'flat-media': FlatMediaSelect<false> | FlatMediaSelect<true>;
    'mock-pages': MockPagesSelect<false> | MockPagesSelect<true>;
    'mock-page-users': MockPageUsersSelect<false> | MockPageUsersSelect<true>;
    request: RequestSelect<false> | RequestSelect<true>;
    'quest-impact-maps': QuestImpactMapsSelect<false> | QuestImpactMapsSelect<true>;
    'quest-products': QuestProductsSelect<false> | QuestProductsSelect<true>;
    quests: QuestsSelect<false> | QuestsSelect<true>;
    'quest-state-logs': QuestStateLogsSelect<false> | QuestStateLogsSelect<true>;
    'quest-users': QuestUsersSelect<false> | QuestUsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flat-media".
 */
export interface FlatMedia {
  id: string;
  title?: string | null;
  backgroundImage?: (string | null) | Media;
  Variation?:
    | {
        slug?: string | null;
        foregroundImage?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mock-pages".
 */
export interface MockPage {
  id: string;
  name: string;
  blocks?:
    | {
        name: string;
        image: string | Media;
        userTypes?: (string | MockPageUser)[] | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mock-page-users".
 */
export interface MockPageUser {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "request".
 */
export interface Request {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * Impact maps for quest products
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-impact-maps".
 */
export interface QuestImpactMap {
  id: string;
  title: string;
  /**
   * JSON object containing columns with nodes. Format: { column_key: { index: number, description: string, items: node[] } }
   */
  Nodes?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Products that can be used to create quests
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-products".
 */
export interface QuestProduct {
  id: string;
  name: string;
  /**
   * The impact map associated with this product
   */
  ImpactMap?: (string | null) | QuestImpactMap;
  Agent?: {
    /**
     * Memory for the agent associated with this product
     */
    memory?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Quests created by users for specific products
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quests".
 */
export interface Quest {
  id: string;
  /**
   * The product this quest is associated with
   */
  productId: string | QuestProduct;
  /**
   * The user who created this quest
   */
  userId: string | QuestUser;
  /**
   * Overview of the quest
   */
  overview: string;
  /**
   * AI-generated labels for this quest
   */
  AILabels?: {
    /**
     * What entity is making the request
     */
    source?: string | null;
    /**
     * What is it
     */
    type?: string | null;
    /**
     * What system does it affect
     */
    system?: string | null;
    /**
     * What is the outcome
     */
    outcome?: string | null;
  };
  dateCreated?: string | null;
  dateModified?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Users who can create and manage quests
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-users".
 */
export interface QuestUser {
  id: string;
  name: string;
  email: string;
  dateCreated?: string | null;
  dateModified?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Logs of state changes for quests
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-state-logs".
 */
export interface QuestStateLog {
  id: string;
  /**
   * The quest this state log is associated with
   */
  questId: string | Quest;
  /**
   * Timestamp of when the state change occurred
   */
  timestamp: string;
  /**
   * The state of the quest
   */
  state: 'created' | 'proposing' | 'approved' | 'rejected';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'flat-media';
        value: string | FlatMedia;
      } | null)
    | ({
        relationTo: 'mock-pages';
        value: string | MockPage;
      } | null)
    | ({
        relationTo: 'mock-page-users';
        value: string | MockPageUser;
      } | null)
    | ({
        relationTo: 'request';
        value: string | Request;
      } | null)
    | ({
        relationTo: 'quest-impact-maps';
        value: string | QuestImpactMap;
      } | null)
    | ({
        relationTo: 'quest-products';
        value: string | QuestProduct;
      } | null)
    | ({
        relationTo: 'quests';
        value: string | Quest;
      } | null)
    | ({
        relationTo: 'quest-state-logs';
        value: string | QuestStateLog;
      } | null)
    | ({
        relationTo: 'quest-users';
        value: string | QuestUser;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flat-media_select".
 */
export interface FlatMediaSelect<T extends boolean = true> {
  title?: T;
  backgroundImage?: T;
  Variation?:
    | T
    | {
        slug?: T;
        foregroundImage?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mock-pages_select".
 */
export interface MockPagesSelect<T extends boolean = true> {
  name?: T;
  blocks?:
    | T
    | {
        name?: T;
        image?: T;
        userTypes?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mock-page-users_select".
 */
export interface MockPageUsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "request_select".
 */
export interface RequestSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-impact-maps_select".
 */
export interface QuestImpactMapsSelect<T extends boolean = true> {
  title?: T;
  Nodes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-products_select".
 */
export interface QuestProductsSelect<T extends boolean = true> {
  name?: T;
  ImpactMap?: T;
  Agent?:
    | T
    | {
        memory?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quests_select".
 */
export interface QuestsSelect<T extends boolean = true> {
  productId?: T;
  userId?: T;
  overview?: T;
  AILabels?:
    | T
    | {
        source?: T;
        type?: T;
        system?: T;
        outcome?: T;
      };
  dateCreated?: T;
  dateModified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-state-logs_select".
 */
export interface QuestStateLogsSelect<T extends boolean = true> {
  questId?: T;
  timestamp?: T;
  state?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quest-users_select".
 */
export interface QuestUsersSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  dateCreated?: T;
  dateModified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}